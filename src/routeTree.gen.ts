/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as UnauthIndexImport } from './routes/_unauth/index'
import { Route as UnauthRegisterImport } from './routes/_unauth/register'
import { Route as UnauthForgotPasswordImport } from './routes/_unauth/forgotPassword'

// Create/Update Routes

const UnauthIndexRoute = UnauthIndexImport.update({
  id: '/_unauth/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const UnauthRegisterRoute = UnauthRegisterImport.update({
  id: '/_unauth/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const UnauthForgotPasswordRoute = UnauthForgotPasswordImport.update({
  id: '/_unauth/forgotPassword',
  path: '/forgotPassword',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_unauth/forgotPassword': {
      id: '/_unauth/forgotPassword'
      path: '/forgotPassword'
      fullPath: '/forgotPassword'
      preLoaderRoute: typeof UnauthForgotPasswordImport
      parentRoute: typeof rootRoute
    }
    '/_unauth/register': {
      id: '/_unauth/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof UnauthRegisterImport
      parentRoute: typeof rootRoute
    }
    '/_unauth/': {
      id: '/_unauth/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof UnauthIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/forgotPassword': typeof UnauthForgotPasswordRoute
  '/register': typeof UnauthRegisterRoute
  '/': typeof UnauthIndexRoute
}

export interface FileRoutesByTo {
  '/forgotPassword': typeof UnauthForgotPasswordRoute
  '/register': typeof UnauthRegisterRoute
  '/': typeof UnauthIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_unauth/forgotPassword': typeof UnauthForgotPasswordRoute
  '/_unauth/register': typeof UnauthRegisterRoute
  '/_unauth/': typeof UnauthIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/forgotPassword' | '/register' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '/forgotPassword' | '/register' | '/'
  id: '__root__' | '/_unauth/forgotPassword' | '/_unauth/register' | '/_unauth/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  UnauthForgotPasswordRoute: typeof UnauthForgotPasswordRoute
  UnauthRegisterRoute: typeof UnauthRegisterRoute
  UnauthIndexRoute: typeof UnauthIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  UnauthForgotPasswordRoute: UnauthForgotPasswordRoute,
  UnauthRegisterRoute: UnauthRegisterRoute,
  UnauthIndexRoute: UnauthIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_unauth/forgotPassword",
        "/_unauth/register",
        "/_unauth/"
      ]
    },
    "/_unauth/forgotPassword": {
      "filePath": "_unauth/forgotPassword.tsx"
    },
    "/_unauth/register": {
      "filePath": "_unauth/register.tsx"
    },
    "/_unauth/": {
      "filePath": "_unauth/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
